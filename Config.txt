# 时间前进
def TimeCome(TimeUnit, IsOutput):
    global NowTime
    NowTime = NowTime + TimeUnit
    if IsOutput == True:
        print("\033[1;36m时间节点：\033[0m", NowTime)


# 零元素所在位置
def GetZeros(List):
    count = 0
    number = 0
    TempList = [0 for _ in range(len(List))]
    while count < len(TempList):
        if List[count] == 0:
            TempList[number] = count
            number = number + 1
        count = count + 1
    Zeros = TempList[0:number]
    return Zeros


# 非零元素所在位置
def GetNORZeros(List):
    count = 0
    number = 0
    TempList = [0 for _ in range(len(List))]
    while count < len(TempList):
        if List[count] != 0:
            TempList[number] = count
            number = number + 1
        count = count + 1
    Zeros = TempList[0:number]
    return Zeros


# RGV从当前移动到指定位置所用时间
def GetTime_Move(Now, End):
    distance = abs(Now - int(End / 2))
    time = RGV_MOVE_TIME[distance]
    return time


# CNC等待时间后剩余时间
def VoidTimeCome_CNC(nowtime, time):
    Newnowtime = nowtime - time
    if Newnowtime < 0:
        Newnowtime = 0
    return Newnowtime


# CNC等待时间后剩余时间
def VoidTimeCome_RGV(nowtime, time):
    Newnowtime = nowtime - time
    if Newnowtime < 0:
        Newnowtime = 0
    return Newnowtime


def GetMinIndex(List):
    Min = [0] * len(List)
    MIN = [0, 0]
    for i in range(len(List)):
        Min[i] = min(List[i])
    MIN[0] = Min.index(min(Min))
    MIN[1] = List[MIN[0]].index(min(List[MIN[0]]))
    return MIN

def GetZerosOfCNC(CNC_Carry_State, CNC_Min_Time):
    Zeros_CNC_Time = GetZeros(CNC_Min_Time)
    Zeros_CNC_Carry = GetNORZeros(CNC_Carry_State)
    print("剩余操作时间为零的CNC及个数", Zeros_CNC_Time, len(Zeros_CNC_Time))
    print("带有物料的CNC及个数", Zeros_CNC_Carry, len(Zeros_CNC_Carry))


# 变量初始化

RGV_MOVE_TIME = [0, 20, 33, 46]  # RGV移动下标个单位距离所用时间
CNC_WORK_TIME = 560  # CNC加工物料所用时间
RGV_IMPORT_CNC_TIME = [28, 31, 28, 31, 28, 31, 28, 31]  # RGV为CNC上下料所用时间
RGV_CLEAR_TIME = 25  # RGV清洗物料所用时间
WORKS = ['M', 'U', 'C']  # ['MOVE','UP-DOWN','CLEAR']

CNC_Carry_State = [0, 0, 0, 0, 0, 0, 0, 0]
CNC_Min_Time = [0, 0, 0, 0, 0, 0, 0, 0]
RGV_Carry_State = [0, 0]
RGV_Locat = 0  # 0,1 2,3 4,5 6,7
RGV_Min_Time = 0

global NowTime
NowTime = 0  # 当前时间节点 起始时间 0s
EndTime = 28800  # 工作期间时间单元个数 8*60*60s
TimeUnit = 1  # 默认时间单元 1s

EndTime = 10
BeforWork = "C"
# Main
while NowTime < EndTime:
    TimeUnit = 1  # 设置时间单元

    print("\033[1;36;40m当前工作时间节点：\033[0m", NowTime)
    Zeros_CNC = GetZeros(CNC_Min_Time)  # 由剩余加工时间得到闲置CNC位置
    # print("闲置CNC位置【 Zeros_CNC 】", Zeros_CNC)
    # print("CNC剩余加工时间【 CNC_Min_Time 】", CNC_Min_Time)
    # print("RGV当前所在位置【 RGV_Locat 】", RGV_Locat + 1, "号机")
    # print("RGV剩余加工时间【 RGV_Min_Time 】", RGV_Min_Time)

    Time_All_Temp = [[-1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1],
                     [-1, -1, -1, -1, -1, -1, -1, -1]]
    # 预测下一步工作所用时间
    for NowWork in WORKS:

        # Time_All_Temp = [[-1] * 8] * 3

        Times_RGV_Move = [0,0,0,0,0,0,0,0]
        Times_CNC_Updown = [0,0,0,0,0,0,0,0]
        # print("\033[1;31m   当前工作流程：\033[0m", NowWork)

        if (NowWork == 'M')&(BeforWork!=NowWork):
            for Zero_CNC in Zeros_CNC:
                # for count in Times_RGV_Move:
                time = GetTime_Move(RGV_Locat, Zero_CNC)  # RGV从当前移动到指定位置所用时间
                Times_RGV_Move[Zero_CNC] = time
            # GetZerosOfCNC(CNC_Carry_State, CNC_Min_Time)
            Time_All_Temp[0] = Times_RGV_Move
            # print("        Times_RGV_Move", Times_RGV_Move)
            BeforWork = NowWork

        if (NowWork == 'U')&(BeforWork!=NowWork):
            # for i in Zeros_CNC:
            # Time_All_Temp[0][i] = 0

            for Zero_CNC in range(len(Zeros_CNC)):
                if CNC_Carry_State[Zero_CNC] == 0 & CNC_Min_Time[Zero_CNC] == 0:
                    Times_CNC_Updown[Zero_CNC] = Times_CNC_Updown[Zero_CNC] + RGV_IMPORT_CNC_TIME[Zero_CNC]

            Time_All_Temp[1] = Times_CNC_Updown

            # print("        Times_CNC_Updown", Times_CNC_Updown)
            BeforWork = NowWork

        if (NowWork == 'C')&(BeforWork!=NowWork):

            if RGV_Carry_State[0] != 0:
                if RGV_Carry_State[1] == 1:
                    Time_All_Temp[2][RGV_Locat] = RGV_CLEAR_TIME
                    # print("Time_All_Temp[2][RGV_Locat]", Time_All_Temp[2][RGV_Locat])
                    BeforWork = NowWork

    # 决定下一步工作并运行
    #print("预计加工时间【 Time_All_Temp 】", Time_All_Temp)

    for i in list(range(3)):
        for j in list(range(8)):
            if Time_All_Temp[i][j] == -1:
                Time_All_Temp[i][j] = 9999


    MinIndex = GetMinIndex(Time_All_Temp)
    # print(MinIndex)
    if MinIndex[0]==0:
        # 操作为Move

        print("Move:",RGV_Locat,"->",MinIndex[1])
        RGV_Locat=MinIndex[1]
        RGV_Min_Time=GetTime_Move(RGV_Locat,MinIndex[1])
    if MinIndex[0] == 1:
        # 操作为UpDown
        print("UpDown:", CNC_Carry_State[RGV_Locat])
        CNC_Min_Time[RGV_Locat]=CNC_Min_Time[RGV_Locat]+RGV_IMPORT_CNC_TIME[RGV_Locat]
        if CNC_Carry_State[RGV_Locat]==0:
            CNC_Carry_State[RGV_Locat]=1
            CNC_Min_Time[RGV_Locat] = CNC_Min_Time[RGV_Locat] +CNC_WORK_TIME
        else:
            CNC_Carry_State[RGV_Locat] = 0
            RGV_Carry_State[0]=1
            RGV_Carry_State[1]=1

    if MinIndex[0] == 2:
        # 操作为Clear
        print("Clear:")
        RGV_Min_Time=RGV_CLEAR_TIME
    # 时间前进

    for i in range(len(CNC_Min_Time)):
        CNC_Min_Time[i]=VoidTimeCome_CNC(CNC_Min_Time[i],TimeUnit)
    RGV_Min_Time=VoidTimeCome_RGV(RGV_Min_Time,TimeUnit)
    TimeCome(TimeUnit, True)

    if NowTime >= EndTime:
        break

v1.2
# 时间前进
def TimeCome(i):
    global NowTime
    NowTime = NowTime + i

# 零元素所在位置
def GetZeros(List):
    count = 0
    number = 0
    TempList=[0 for _ in range(len(List))]
    while count < len(TempList):
        if List[count] == 0:
            TempList[number] = count
            number = number + 1
        count = count + 1
    Zeros = TempList[0:number]
    return Zeros

# 非零元素所在位置
def GetNORZeros(List):
    count = 0
    number = 0
    TempList=[0 for _ in range(len(List))]
    while count < len(TempList):
        if List[count] != 0:
            TempList[number] = count
            number = number + 1
        count = count + 1
    Zeros = TempList[0:number]
    return Zeros

# RGV从当前移动到指定位置所用时间
def GetTime_Move(Now,End):
    distance=abs(Now-int(End/2))
    time=RGV_MOVE_TIME[distance]
    return time

#CNC等待时间后剩余时间
def VoidTimeCome_CNC(nowtime,time):
    Newnowtime=nowtime - time
    if Newnowtime<0:
        Newnowtime=0
    return Newnowtime

def GetZerosOfCNC(CNC_Carry_State,CNC_Min_Time):
    Zeros_CNC_Time = GetZeros(CNC_Min_Time)
    Zeros_CNC_Carry = GetNORZeros(CNC_Carry_State)
    print("剩余操作时间为零的CNC及个数", Zeros_CNC_Time, len(Zeros_CNC_Time))
    print("带有物料的CNC及个数", Zeros_CNC_Carry, len(Zeros_CNC_Carry))
'''
变量初始化
'''
RGV_MOVE_TIME = [0, 20, 33, 46]  # RGV移动下标个单位距离所用时间
CNC_WORK_TIME = 560  # CNC加工物料所用时间
RGV_IMPORT_CNC_TIME = [28, 31, 28, 31, 28, 31,28,31]  # RGV为CNC上下料所用时间
RGV_CLEAR_TIME = 25  # RGV清洗物料所用时间
WORKS=['MOVE','UP-DOWN','CLEAR']

CNC_Carry_State = [0, 0, 0, 0, 0, 0, 0, 0]
CNC_Min_Time = [0, 0, 0, 0, 0, 0, 0, 0]
RGV_Carry_State = [0, 0]
RGV_Locat = 0 # 0,1 2,3 4,5 6,7

global NowTime
NowTime = 0
EndTime = 28800  # 8*60*60


'''
# Main
while NowTime != EndTime:
    i=1
    for NowWork in WORKS:
    ……
    TimeCome(i)
'''


'''MOVE'''
CNC_Min_Time=[100, 200, 400, 500, 170, 4, 0, 0]
RGV_Carry_State = [1, 1]

Zeros_CNC=GetZeros(CNC_Min_Time) # 得到闲置CNC位置
print("Zeros_CNC",Zeros_CNC)
#Times_RGV_Move=[0 for _ in range(len(Zeros_CNC))]
Times_RGV_Move=[-1,-1,-1,-1,-1,-1,-1,-1]
for count in range(len(Zeros_CNC)):
#for count in Times_RGV_Move:
    time=GetTime_Move(RGV_Locat,Zeros_CNC[count])# RGV从当前移动到指定位置所用时间
    Times_RGV_Move[count]=time
#Zeros_CNC Times_RGV_Move

GetZerosOfCNC(CNC_Carry_State,CNC_Min_Time)

'''UP-DOWN'''
#for Zero_CNC in Zeros_CNC:
Times_CNC_Updown=[0 for _ in range(len(Zeros_CNC))]
for Zero_CNC in range(len(Zeros_CNC)):
    if CNC_Carry_State[Zero_CNC]==0 & CNC_Min_Time[Zero_CNC]==0 :
        Times_CNC_Updown[Zero_CNC]=Times_CNC_Updown[Zero_CNC]+RGV_IMPORT_CNC_TIME[Zero_CNC]
print("Times_CNC_Updown",Times_CNC_Updown)
#Times_CNC

'''CLEAR'''
#for Zero_CNC in Zeros_CNC:
#for Zero_CNC in range(len(Zeros_CNC)):
#    if CNC_Carry_State[Zero_CNC]==1 & CNC_Min_Time[Zero_CNC]==0 :
#        Times_CNC_Clear[Zero_CNC]=Times_CNC_Clear[Zero_CNC]+RGV_IMPORT_CNC_TIME[Zero_CNC]
#print(Times_CNC_Clear)
#Times_CNC_Clear=[0 for _ in range(len(Zeros_CNC))]
Time_Clear=0
if RGV_Carry_State[0]!=0:
    if RGV_Carry_State[1]==1:
        Time_Clear=RGV_CLEAR_TIME
print("Time_Clear",Time_Clear)
#Times_Clear


Times_Works=[0 for _ in range(len(Zeros_CNC))]
for count in range(len(Zeros_CNC)):
    Times_Works[count]=Times_RGV_Move[count]+Times_CNC_Updown[count]
print("Times_Works",Times_Works)

CNC_Min_Time_1=[0 for _ in range(len(Zeros_CNC)*len(CNC_Min_Time))]
for count_0 in range(len(Zeros_CNC)):
    for count_1 in range(len(CNC_Min_Time)):
        CNC_Min_Time_1[count_1+count_0*len(CNC_Min_Time)]=VoidTimeCome_CNC(CNC_Min_Time[count_1],Times_Works[count_0])
        #CNC_Min_Time_1[count_1 + count_0 * len(CNC_Min_Time)] = CNC_Min_Time[count_1]-Times_Works[count_0]
print("CNC_Min_Time_1",CNC_Min_Time_1)


for i in range(int((len(CNC_Min_Time_1))/8)):
    CNC_Min_Time=CNC_Min_Time_1[i*8:8+i*8]
    Zeros_CNC=GetZeros(CNC_Min_Time) # 得到闲置CNC位置
    print("Zeros_CNC",Zeros_CNC)
    #Times_RGV_Move=[0 for _ in range(len(Zeros_CNC))]
    Times_RGV_Move=[-1,-1,-1,-1,-1,-1,-1,-1]
    for count in range(len(Zeros_CNC)):
    #for count in Times_RGV_Move:
        time=GetTime_Move(RGV_Locat,Zeros_CNC[count])# RGV从当前移动到指定位置所用时间
        Times_RGV_Move[count]=time
    #Zeros_CNC Times_RGV_Move

    '''UP-DOWN'''
    #for Zero_CNC in Zeros_CNC:
    Times_CNC_Updown=[0 for _ in range(len(Zeros_CNC))]
    for Zero_CNC in range(len(Zeros_CNC)):
        if CNC_Carry_State[Zero_CNC]==0 & CNC_Min_Time[Zero_CNC]==0 :
            Times_CNC_Updown[Zero_CNC]=Times_CNC_Updown[Zero_CNC]+RGV_IMPORT_CNC_TIME[Zero_CNC]
    print("Times_CNC_Updown",Times_CNC_Updown)
    #Times_CNC

    '''CLEAR'''
    #for Zero_CNC in Zeros_CNC:
    #for Zero_CNC in range(len(Zeros_CNC)):
    #    if CNC_Carry_State[Zero_CNC]==1 & CNC_Min_Time[Zero_CNC]==0 :
    #        Times_CNC_Clear[Zero_CNC]=Times_CNC_Clear[Zero_CNC]+RGV_IMPORT_CNC_TIME[Zero_CNC]
    #print(Times_CNC_Clear)
    #Times_CNC_Clear=[0 for _ in range(len(Zeros_CNC))]
    Time_Clear=0
    if RGV_Carry_State[0]!=0:
        if RGV_Carry_State[1]==1:
            Time_Clear=RGV_CLEAR_TIME
    print("Time_Clear",Time_Clear)
    #Times_Clear


    Times_Works=[0 for _ in range(len(Zeros_CNC))]
    for count in range(len(Zeros_CNC)):
        Times_Works[count]=Times_RGV_Move[count]+Times_CNC_Updown[count]
    print("Times_Works",Times_Works)

    CNC_Min_Time_1=[0 for _ in range(len(Zeros_CNC)*len(CNC_Min_Time))]
    for count_0 in range(len(Zeros_CNC)):
        for count_1 in range(len(CNC_Min_Time)):
            CNC_Min_Time_1[count_1+count_0*len(CNC_Min_Time)]=VoidTimeCome_CNC(CNC_Min_Time[count_1],Times_Works[count_0])
            #CNC_Min_Time_1[count_1 + count_0 * len(CNC_Min_Time)] = CNC_Min_Time[count_1]-Times_Works[count_0]
    print("CNC_Min_Time_1",CNC_Min_Time_1)


v2.0
# 时间前进
def TimeCome(TimeUnit, IsOutput):
    global NowTime
    NowTime = NowTime + TimeUnit
    if IsOutput == True:
        print("\033[1;36m时间节点：\033[0m", NowTime)

# 成品计数
def ProductAdd():
    global AllProduct
    AllProduct=AllProduct+1

# 打印每次循环信息
def PrintLoop(NowTime,CNC_Min_Time,CNC_Carry_State,RGV_Locat,RGV_Min_Time,RGV_Carry_State):
    print("\033[1;36;40m当前工作时间节点：\033[0m", NowTime)
    print("CNC剩余加工时间【 CNC_Min_Time 】", CNC_Min_Time)
    print("CNC当前携带工件【 CNC_Carry_State 】", CNC_Carry_State)
    print("RGV当前所在位置【 RGV_Locat 】", RGV_Locat + 1, "号机")
    print("RGV剩余加工时间【 RGV_Min_Time 】", RGV_Min_Time)
    print("RGV当前携带工件【 RGV_Carry_State 】", RGV_Carry_State)

# 零元素所在位置
def GetZeros(List):
    count = 0
    number = 0
    TempList = [0 for _ in range(len(List))]
    while count < len(TempList):
        if List[count] == 0:
            TempList[number] = count
            number = number + 1
        count = count + 1
    Zeros = TempList[0:number]
    return Zeros

# 非零元素所在位置
def GetNORZeros(List):
    count = 0
    number = 0
    TempList = [0 for _ in range(len(List))]
    while count < len(TempList):
        if List[count] != 0:
            TempList[number] = count
            number = number + 1
        count = count + 1
    Zeros = TempList[0:number]
    return Zeros

# RGV从当前移动到指定位置所用时间
def GetTime_Move(Now, End):
    distance = abs(Now - int(End / 2))
    time = RGV_MOVE_TIME[distance]
    return time

# CNC等待时间后剩余时间
def VoidTimeCome_CNC(nowtime, time):
    Newnowtime = nowtime - time
    if Newnowtime < 0:
        Newnowtime = 0
    return Newnowtime

# CNC等待时间后剩余时间
def VoidTimeCome_RGV(nowtime, time):
    Newnowtime = nowtime - time
    if Newnowtime < 0:
        Newnowtime = 0
    return Newnowtime

def GetMinIndex(List):
    Min = [0] * len(List)
    MIN = [0, 0]
    for i in range(len(List)):
        Min[i] = min(List[i])
    MIN[0] = Min.index(min(Min))
    MIN[1] = List[MIN[0]].index(min(List[MIN[0]]))
    return MIN

def GetZerosOfCNC(CNC_Carry_State, CNC_Min_Time):
    Zeros_CNC_Time = GetZeros(CNC_Min_Time)
    Zeros_CNC_Carry = GetNORZeros(CNC_Carry_State)
    print("剩余操作时间为零的CNC及个数", Zeros_CNC_Time, len(Zeros_CNC_Time))
    print("带有物料的CNC及个数", Zeros_CNC_Carry, len(Zeros_CNC_Carry))

# 常量初始化
RGV_MOVE_TIME = [0, 0, 20, 20, 33, 33, 46, 46]  # RGV移动下标个单位距离所用时间
CNC_WORK_TIME = 560  # CNC加工物料所用时间
RGV_IMPORT_CNC_TIME = [28, 31, 28, 31, 28, 31, 28, 31]  # RGV为CNC上下料所用时间
RGV_CLEAR_TIME = 25  # RGV清洗物料所用时间
WORKS = ['U', 'C']  # ['UP-DOWN','CLEAR']
EndTime = 28800  # 工作期间时间单元个数 8*60*60s

# 全局变量初始化
global AllProduct
global NowTime
AllProduct =0 # 起始成品个数
NowTime = 0  # 当前时间节点 起始时间 0s

# 变量初始化
TimeUnit = 1  # 默认时间单元 1s
CNC_Carry_State = [0, 0, 0, 0, 0, 0, 0, 0]
CNC_Min_Time = [0, 0, 0, 0, 0, 0, 0, 0]
RGV_Carry_State = [0, 0] # 【0，X】不存在工件 【1，0】存在工件正在加工 【1，1】存在工件已加工完成
RGV_Locat = 0  # 0,1 2,3 4,5 6,7
RGV_Min_Time = 0

# Main
EndTime = 1000
FileSave = open("Log.txt", 'a', encoding='utf-8')

while NowTime < EndTime:
    TimeUnit = 1  # 设置时间单元

    PrintLoop(NowTime, CNC_Min_Time, CNC_Carry_State, RGV_Locat, RGV_Min_Time, RGV_Carry_State)

    FileSave.write("当前工作时间节点：" + str(NowTime) + '\n')
    Zeros_CNC = GetZeros(CNC_Min_Time)  # 由剩余加工时间得到闲置CNC位置
    Time_All_Temp = [[-1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1]]
    print("闲置CNC位置【 Zeros_CNC 】", Zeros_CNC)
    # 预测下一步工作所用时间
    for NowWork in WORKS:

        print("\033[1;31m   当前工作流程：\033[0m", NowWork)

        Times_RGV_Move = [0, 0, 0, 0, 0, 0, 0, 0]
        Times_CNC_Updown = [0, 0, 0, 0, 0, 0, 0, 0]

        if NowWork == 'U':
            for Zero_CNC in Zeros_CNC:
                time = GetTime_Move(RGV_Locat, Zero_CNC)  # RGV从当前移动到指定位置所用时间
                Times_RGV_Move[Zero_CNC] = time
            print("        Times_RGV_Move", Times_RGV_Move)
            for Zero_CNC in Zeros_CNC:
                if CNC_Carry_State[Zero_CNC] == 0 & CNC_Min_Time[Zero_CNC] == 0:
                    Times_CNC_Updown[Zero_CNC] = Times_CNC_Updown[Zero_CNC] + RGV_IMPORT_CNC_TIME[Zero_CNC]
            for i in range(len(Time_All_Temp[0])):
                Time_All_Temp[0][i] = Times_CNC_Updown[i] + Times_RGV_Move[i]

            print("        Times_CNC_Updown", Times_CNC_Updown)

        if NowWork == 'C':
            if RGV_Carry_State[0] != 0:
                if RGV_Carry_State[1] == 1:
                    for Zero_CNC in Zeros_CNC:
                        # for count in Times_RGV_Move:
                        time = GetTime_Move(RGV_Locat, Zero_CNC)  # RGV从当前移动到指定位置所用时间
                        Times_RGV_Move[Zero_CNC] = time
                    # GetZerosOfCNC(CNC_Carry_State, CNC_Min_Time)
                    Time_All_Temp[1] = Times_RGV_Move
                    print("        Times_RGV_Move", Times_RGV_Move)
                    Time_All_Temp[1][RGV_Locat] = Time_All_Temp[1][RGV_Locat] + RGV_CLEAR_TIME
                    print("        Time_All_Temp[1][RGV_Locat]", Time_All_Temp[1][RGV_Locat])

    # 决定下一步工作并运行
    print("预计加工时间【 Time_All_Temp 】", Time_All_Temp)

    for i in list(range(2)):
        for j in list(range(8)):
            if Time_All_Temp[i][j] == -1:
                Time_All_Temp[i][j] = 9999
            if CNC_Min_Time[j] != 0 & i == 0:
                Time_All_Temp[i][j] = 9999
    print("预计加工时间【 Time_All_Temp 】", Time_All_Temp)
    MinIndex = GetMinIndex(Time_All_Temp)
    print("MinIndex", MinIndex)

    # 运行下一步
    if RGV_Min_Time == 0:
        if MinIndex[0] == 0:
            # 操作为MoveUpDown
            print("Move:", RGV_Locat, "->", MinIndex[1], "UpDown:", CNC_Carry_State[RGV_Locat])
            # Text="Move: %2d -> %2d UpDown: %2d %c"%(RGV_Locat, MinIndex[1], CNC_Carry_State[RGV_Locat],'\n')

            FileSave.write(r"Move: % 2d -> % 2d UpDown: %2d %c"%(RGV_Locat, MinIndex[1], CNC_Carry_State[RGV_Locat],'\n'))
            RGV_Locat = MinIndex[1]
            RGV_Min_Time = GetTime_Move(RGV_Locat, MinIndex[1]) + RGV_IMPORT_CNC_TIME[RGV_Locat]
            if CNC_Carry_State[RGV_Locat] == 0:
                CNC_Carry_State[RGV_Locat] = 1
                CNC_Min_Time[RGV_Locat] = CNC_Min_Time[RGV_Locat] + CNC_WORK_TIME + RGV_IMPORT_CNC_TIME[RGV_Locat]
            else:
                CNC_Carry_State[RGV_Locat] = 0
                RGV_Carry_State[0] = 1
                RGV_Carry_State[1] = 1
                ProductAdd()

        if MinIndex[0] == 1:
            # 操作为MoveClear
            print("Move:", RGV_Locat, "->", MinIndex[1], "Clear")
            FileSave.write(r"Move: %2d -> %2d Clear %c" % (RGV_Locat, MinIndex[1], '\n'))
            RGV_Locat = MinIndex[1]
            RGV_Min_Time = GetTime_Move(RGV_Locat, MinIndex[1])
            RGV_Min_Time = RGV_CLEAR_TIME
    else:
        TimeUnit=RGV_Min_Time
    # 时间前进
    for i in range(len(CNC_Min_Time)):
        CNC_Min_Time[i] = VoidTimeCome_CNC(CNC_Min_Time[i], TimeUnit)
    RGV_Min_Time = VoidTimeCome_RGV(RGV_Min_Time, TimeUnit)
    TimeCome(TimeUnit, True)

    if NowTime >= EndTime:
        break
print(AllProduct)
FileSave.close()

v3.0
# 时间前进
def TimeCome(TimeUnit, IsOutput):
    global NowTime
    NowTime = NowTime + TimeUnit
    if IsOutput == True:
        print("\033[1;36m时间节点：\033[0m", NowTime)


# 成品计数
def ProductAdd():
    global AllProduct
    AllProduct = AllProduct + 1


# 打印每次循环信息
def PrintLoop(NowTime, CNC_Min_Time, CNC_Carry_State, RGV_Locat, RGV_Min_Time, RGV_Carry_State):
    print("\033[1;36;40m当前工作时间节点：\033[0m", NowTime)
    print("CNC剩余加工时间【 CNC_Min_Time 】", CNC_Min_Time)
    print("CNC当前携带工件【 CNC_Carry_State 】", CNC_Carry_State)
    print("RGV当前所在位置【 RGV_Locat 】", RGV_Locat + 1, "号机")
    print("RGV剩余加工时间【 RGV_Min_Time 】", RGV_Min_Time)
    print("RGV当前携带工件【 RGV_Carry_State 】", RGV_Carry_State)


# 零元素所在位置
def GetZeros(List):
    count = 0
    number = 0
    TempList = [0 for _ in range(len(List))]
    while count < len(TempList):
        if List[count] == 0:
            TempList[number] = count
            number = number + 1
        count = count + 1
    Zeros = TempList[0:number]
    return Zeros


# 非零元素所在位置
def GetNORZeros(List):
    count = 0
    number = 0
    TempList = [0 for _ in range(len(List))]
    while count < len(TempList):
        if List[count] != 0:
            TempList[number] = count
            number = number + 1
        count = count + 1
    Zeros = TempList[0:number]
    return Zeros


# RGV从当前移动到指定位置所用时间
def GetTime_Move(Now, End):
    distance = abs(int(Now / 2) - int(End / 2))
    time = RGV_MOVE_TIME[distance]
    return time


# CNC等待时间后剩余时间
def VoidTimeCome_CNC(nowtime, time):
    Newnowtime = nowtime - time
    if Newnowtime < 0:
        Newnowtime = 0
    return Newnowtime


# CNC等待时间后剩余时间
def VoidTimeCome_RGV(nowtime, time):
    Newnowtime = nowtime - time
    if Newnowtime < 0:
        Newnowtime = 0
    return Newnowtime


def GetMinIndex(List):
    Min = [0] * len(List)
    MIN = [0, 0]
    for i in range(len(List)):
        Min[i] = min(List[i])
    MIN[0] = Min.index(min(Min))
    MIN[1] = List[MIN[0]].index(min(List[MIN[0]]))
    return MIN


def GetZerosOfCNC(CNC_Carry_State, CNC_Min_Time):
    Zeros_CNC_Time = GetZeros(CNC_Min_Time)
    Zeros_CNC_Carry = GetNORZeros(CNC_Carry_State)
    print("剩余操作时间为零的CNC及个数", Zeros_CNC_Time, len(Zeros_CNC_Time))
    print("带有物料的CNC及个数", Zeros_CNC_Carry, len(Zeros_CNC_Carry))

def LocalOptimalScheme():
    '''选择局部最优加工方案'''
    '''确定CNC的需求信号'''
    print("——确定CNC的需求信号——")
    Zeros_CNC = GetZeros(CNC_Min_Time)  # 由剩余加工时间得到闲置CNC位置
    for Zero_CNC in Zeros_CNC:
        time = GetTime_Move(RGV_Locat, Zero_CNC)  # RGV从当前移动到指定位置所用时间
        Times_RGV_Move[Zero_CNC] = time
    print("闲置CNC位置【 Zeros_CNC 】", Zeros_CNC)
    print("RGV从当前移动到指定位置所用时间【 Times_RGV_Move 】", Times_RGV_Move)

    '''确定CNC的上下料所需时间'''

    print("——确定CNC的上料所需时间——")
    for Zero_CNC in Zeros_CNC:
        if CNC_Carry_State[Zero_CNC] == 0:
            Times_CNC_Up[Zero_CNC] = RGV_IMPORT_CNC_TIME[Zero_CNC]
            Time_All_Temp[Zero_CNC] = Times_CNC_Up[Zero_CNC] + Times_RGV_Move[Zero_CNC]
    print("CNC的上料所需时间【 Times_CNC_Up 】", Times_CNC_Up)

    print("——确定CNC的下料及清洗所需时间——")
    for Zero_CNC in Zeros_CNC:
        if CNC_Carry_State[Zero_CNC] == 1:
            if CNC_Min_Time[Zero_CNC] == 0:
                Times_CNC_Down[Zero_CNC] = RGV_IMPORT_CNC_TIME[Zero_CNC] + RGV_CLEAR_TIME
                Time_All_Temp[Zero_CNC] = Times_CNC_Down[Zero_CNC] + Times_RGV_Move[Zero_CNC]
                # else:
                Time_All_Temp[Zero_CNC] = Times_CNC_Down[Zero_CNC] + Times_RGV_Move[Zero_CNC]
    print("CNC的下料及清洗所需时间【 Times_CNC_Down 】", Times_CNC_Down)

    for j in list(range(8)):
        if Time_All_Temp[j] == -1:
            Time_All_Temp[j] = 9999
            # if CNC_Min_Time[j] != 0:
            Time_All_Temp[j] = 9999
    print("预计步骤时间【 Time_All_Temp 】", Time_All_Temp)

    MinIndex = Time_All_Temp.index(min(Time_All_Temp))
# 常量初始化
RGV_MOVE_TIME = [0, 20, 33, 46]  # RGV移动下标个单位距离所用时间
CNC_WORK_TIME = 560  # CNC加工物料所用时间
RGV_IMPORT_CNC_TIME = [28, 31, 28, 31, 28, 31, 28, 31]  # RGV为CNC上下料所用时间
RGV_CLEAR_TIME = 25  # RGV清洗物料所用时间
# WORKS = ['U', 'C']  # ['UP-DOWN','CLEAR']
EndTime = 28800  # 工作期间时间单元个数 8*60*60s

# 全局变量初始化
global AllProduct
global NowTime
AllProduct = 0  # 起始成品个数
NowTime = 0  # 当前时间节点 起始时间 0s

# 变量初始化
TimeUnit = 1  # 默认时间单元 1s
CNC_Carry_State = [0, 0, 0, 0, 0, 0, 0, 0]  # 【0】没有工件在加工 【1】有工件在加工或加工完成
CNC_Min_Time = [0, 0, 0, 0, 0, 0, 0, 0]  # 【0】加工完成 【X】正在加工
RGV_Carry_State = [0, 0]  # 【0，X】不存在工件 【1，0】存在工件正在加工 【1，1】存在工件已加工完成
RGV_Locat = 0  # 0,1 2,3 4,5 6,7
RGV_Min_Time = 0

# Main
#EndTime = 1000
FileSave = open("Log.txt", 'a', encoding='utf-8')

while NowTime < EndTime:
    TimeUnit = 1  # 设置时间单元
    Time_All_Temp = [-1, -1, -1, -1, -1, -1, -1, -1]

    Times_RGV_Temp = 0
    Times_CNC_Temp = [0, 0, 0, 0, 0, 0, 0, 0]
    Times_RGV_Move = [0, 0, 0, 0, 0, 0, 0, 0]
    Times_CNC_Up = [0, 0, 0, 0, 0, 0, 0, 0]
    Times_CNC_Down = [0, 0, 0, 0, 0, 0, 0, 0]

    PrintLoop(NowTime, CNC_Min_Time, CNC_Carry_State, RGV_Locat, RGV_Min_Time, RGV_Carry_State)

    FileSave.write("当前工作时间节点：" + str(NowTime) + '\n')

    '''选择局部最优加工方案'''
    '''确定CNC的需求信号'''
    print("——确定CNC的需求信号——")
    Zeros_CNC = GetZeros(CNC_Min_Time)  # 由剩余加工时间得到闲置CNC位置
    for Zero_CNC in Zeros_CNC:
        time = GetTime_Move(RGV_Locat, Zero_CNC)  # RGV从当前移动到指定位置所用时间
        Times_RGV_Move[Zero_CNC] = time
    print("闲置CNC位置【 Zeros_CNC 】", Zeros_CNC)
    print("RGV从当前移动到指定位置所用时间【 Times_RGV_Move 】", Times_RGV_Move)

    '''确定CNC的上下料所需时间'''

    print("——确定CNC的上料所需时间——")
    for Zero_CNC in Zeros_CNC:
        if CNC_Carry_State[Zero_CNC] == 0:
            Times_CNC_Up[Zero_CNC] = RGV_IMPORT_CNC_TIME[Zero_CNC]
            Time_All_Temp[Zero_CNC] = Times_CNC_Up[Zero_CNC] + Times_RGV_Move[Zero_CNC]
    print("CNC的上料所需时间【 Times_CNC_Up 】", Times_CNC_Up)

    print("——确定CNC的下料及清洗所需时间——")
    for Zero_CNC in Zeros_CNC:
        if CNC_Carry_State[Zero_CNC] == 1:
            if CNC_Min_Time[Zero_CNC] == 0:
                Times_CNC_Down[Zero_CNC] = RGV_IMPORT_CNC_TIME[Zero_CNC] + RGV_CLEAR_TIME
                Time_All_Temp[Zero_CNC] = Times_CNC_Down[Zero_CNC] + Times_RGV_Move[Zero_CNC]
                # else:
                Time_All_Temp[Zero_CNC] = Times_CNC_Down[Zero_CNC] + Times_RGV_Move[Zero_CNC]
    print("CNC的下料及清洗所需时间【 Times_CNC_Down 】", Times_CNC_Down)

    for j in list(range(8)):
        if Time_All_Temp[j] == -1:
            Time_All_Temp[j] = 9999
            # if CNC_Min_Time[j] != 0:
            Time_All_Temp[j] = 9999
    print("预计步骤时间【 Time_All_Temp 】", Time_All_Temp)

    MinIndex = Time_All_Temp.index(min(Time_All_Temp))
    print("MinIndex", MinIndex)

    # 运行
    if RGV_Min_Time == 0:
        # 操作为MoveUpDown
        print("Move:", RGV_Locat, "->", MinIndex, "UpDown:", CNC_Carry_State[RGV_Locat])
        FileSave.write(r"Move: % 2d -> % 2d UpDown: %2d %c" % (RGV_Locat, MinIndex, CNC_Carry_State[RGV_Locat], '\n'))
        RGV_Locat = MinIndex
        if CNC_Carry_State[MinIndex] == 0:
            print("对CNC", MinIndex + 1, "进行上料操作")
            CNC_Carry_State[MinIndex] = 1
            if CNC_Min_Time[MinIndex] == 0:
                CNC_Min_Time[MinIndex] = CNC_WORK_TIME + Time_All_Temp[MinIndex]
            else:
                print("ERROR!")
            RGV_Min_Time = Time_All_Temp[MinIndex]
        else:
            print("对CNC", MinIndex + 1, "进行下料清洗操作")
            if CNC_Min_Time[MinIndex] == 0:
                CNC_Carry_State[MinIndex] = 0
                RGV_Min_Time = Time_All_Temp[MinIndex]
                ProductAdd()
    if (RGV_Min_Time!=0)or(min(CNC_Min_Time)>0):

        Min_Time = CNC_Min_Time + [RGV_Min_Time]
        for i in range(len(Min_Time)):
            if Min_Time[i] == 0:
                Min_Time[i] = 9999
        print(Min_Time)
        TimeUnit = min(Min_Time)
    # 时间前进
    for i in range(len(CNC_Min_Time)):
        CNC_Min_Time[i] = VoidTimeCome_CNC(CNC_Min_Time[i], TimeUnit)
    RGV_Min_Time = VoidTimeCome_RGV(RGV_Min_Time, TimeUnit)
    TimeCome(TimeUnit, True)

    if NowTime >= EndTime:
        break
print(AllProduct)
FileSave.close()
v4.0
# 时间前进
def TimeCome(TimeUnit, IsOutput):
    global NowTime
    NowTime = NowTime + TimeUnit
    if IsOutput == True:
        print("\033[1;36m时间节点：\033[0m", NowTime)


# 成品计数
def ProductAdd():
    global AllProduct
    AllProduct = AllProduct + 1


# 打印每次循环信息
def PrintLoop(NowTime, CNC_Min_Time, CNC_Carry_State, RGV_Locat, RGV_Min_Time, RGV_Carry_State):
    print("\033[1;36;40m当前工作时间节点：\033[0m", NowTime)
    print("CNC剩余加工时间【 CNC_Min_Time 】", CNC_Min_Time)
    print("CNC当前携带工件【 CNC_Carry_State 】", CNC_Carry_State)
    print("RGV当前所在位置【 RGV_Locat 】", RGV_Locat + 1, "号机")
    print("RGV剩余加工时间【 RGV_Min_Time 】", RGV_Min_Time)
    print("RGV当前携带工件【 RGV_Carry_State 】", RGV_Carry_State)


# 零元素所在位置
def GetZeros(List):
    count = 0
    number = 0
    TempList = [0 for _ in range(len(List))]
    while count < len(TempList):
        if List[count] == 0:
            TempList[number] = count
            number = number + 1
        count = count + 1
    Zeros = TempList[0:number]
    return Zeros


# 非零元素所在位置
def GetNORZeros(List):
    count = 0
    number = 0
    TempList = [0 for _ in range(len(List))]
    while count < len(TempList):
        if List[count] != 0:
            TempList[number] = count
            number = number + 1
        count = count + 1
    Zeros = TempList[0:number]
    return Zeros


# RGV从当前移动到指定位置所用时间
def GetTime_Move(Now, End):
    distance = abs(int(Now / 2) - int(End / 2))
    time = RGV_MOVE_TIME[distance]
    return time


# CNC等待时间后剩余时间
def VoidTimeCome_CNC(nowtime, time):
    Newnowtime = nowtime - time
    if Newnowtime < 0:
        Newnowtime = 0
    return Newnowtime


# CNC等待时间后剩余时间
def VoidTimeCome_RGV(nowtime, time):
    Newnowtime = nowtime - time
    if Newnowtime < 0:
        Newnowtime = 0
    return Newnowtime


def GetMinIndex(List):
    Min = [0] * len(List)
    MIN = [0, 0]
    for i in range(len(List)):
        Min[i] = min(List[i])
    MIN[0] = Min.index(min(Min))
    MIN[1] = List[MIN[0]].index(min(List[MIN[0]]))
    return MIN


def GetZerosOfCNC(CNC_Carry_State, CNC_Min_Time):
    Zeros_CNC_Time = GetZeros(CNC_Min_Time)
    Zeros_CNC_Carry = GetNORZeros(CNC_Carry_State)
    print("剩余操作时间为零的CNC及个数", Zeros_CNC_Time, len(Zeros_CNC_Time))
    print("带有物料的CNC及个数", Zeros_CNC_Carry, len(Zeros_CNC_Carry))


def LocalOptimalScheme(Judg):
    '''选择局部最优加工方案'''
    '''确定CNC的需求信号'''
    if Judg == True:
        print("——确定CNC的需求信号——")
    Zeros_CNC = GetZeros(CNC_Min_Time)  # 由剩余加工时间得到闲置CNC位置
    for Zero_CNC in Zeros_CNC:
        time = GetTime_Move(RGV_Locat, Zero_CNC)  # RGV从当前移动到指定位置所用时间
        Times_RGV_Move[Zero_CNC] = time
    if Judg == True:
        print("闲置CNC位置【 Zeros_CNC 】", Zeros_CNC)
        print("RGV从当前移动到指定位置所用时间【 Times_RGV_Move 】", Times_RGV_Move)

    '''确定CNC的上下料所需时间'''
    if Judg == True:
        print("——确定CNC的上料所需时间——")
    for Zero_CNC in Zeros_CNC:
        if CNC_Carry_State[Zero_CNC] == 0:
            Times_CNC_Up[Zero_CNC] = RGV_IMPORT_CNC_TIME[Zero_CNC]
            Time_All_Temp[Zero_CNC] = Times_CNC_Up[Zero_CNC] + Times_RGV_Move[Zero_CNC]
    if Judg == True:
        print("CNC的上料所需时间【 Times_CNC_Up 】", Times_CNC_Up)
        print("——确定CNC的下料及清洗所需时间——")
    for Zero_CNC in Zeros_CNC:
        if CNC_Carry_State[Zero_CNC] == 1:
            if CNC_Min_Time[Zero_CNC] == 0:
                Times_CNC_Down[Zero_CNC] = RGV_IMPORT_CNC_TIME[Zero_CNC] + RGV_CLEAR_TIME
                Time_All_Temp[Zero_CNC] = Times_CNC_Down[Zero_CNC] + Times_RGV_Move[Zero_CNC]
                # else:
                Time_All_Temp[Zero_CNC] = Times_CNC_Down[Zero_CNC] + Times_RGV_Move[Zero_CNC]
    if Judg == True:
        print("CNC的下料及清洗所需时间【 Times_CNC_Down 】", Times_CNC_Down)

    for j in list(range(8)):
        if Time_All_Temp[j] == -1:
            Time_All_Temp[j] = 9999

    if Judg == True:
        print("预计步骤时间【 Time_All_Temp 】", Time_All_Temp)
    MinIndex = Time_All_Temp.index(min(Time_All_Temp))
    if Judg == True:
        print("MinIndex", MinIndex)
    return MinIndex


def OptimizingTimeParameters(Judg):
    if (RGV_Min_Time != 0) or (min(CNC_Min_Time) > 0):

        Min_Time = CNC_Min_Time + [RGV_Min_Time]
        for i in range(len(Min_Time)):
            if Min_Time[i] == 0:
                Min_Time[i] = 9999
        if Judg == True:
            print(Min_Time)
        TimeUnit = min(Min_Time)

        return TimeUnit


# 常量初始化
RGV_MOVE_TIME = [0, 20, 33, 46]  # RGV移动下标个单位距离所用时间
CNC_WORK_TIME = 560  # CNC加工物料所用时间
RGV_IMPORT_CNC_TIME = [28, 31, 28, 31, 28, 31, 28, 31]  # RGV为CNC上下料所用时间
RGV_CLEAR_TIME = 25  # RGV清洗物料所用时间
# WORKS = ['U', 'C']  # ['UP-DOWN','CLEAR']
EndTime = 28800  # 工作期间时间单元个数 8*60*60s

# 全局变量初始化
global AllProduct
global NowTime
AllProduct = 0  # 起始成品个数
NowTime = 0  # 当前时间节点 起始时间 0s

# 变量初始化
TimeUnit = 1  # 默认时间单元 1s
CNC_Carry_State = [0, 0, 0, 0, 0, 0, 0, 0]  # 【0】没有工件在加工 【1】有工件在加工或加工完成
CNC_Min_Time = [0, 0, 0, 0, 0, 0, 0, 0]  # 【0】加工完成 【X】正在加工
RGV_Carry_State = [0, 0]  # 【0，X】不存在工件 【1，0】存在工件正在加工 【1，1】存在工件已加工完成
RGV_Locat = 0  # 0,1 2,3 4,5 6,7
RGV_Min_Time = 0

# Main
# EndTime = 1000
FileSave = open("Log.txt", 'a', encoding='utf-8')

while NowTime < EndTime:
    TimeUnit = 1  # 设置时间单元
    Time_All_Temp = [-1, -1, -1, -1, -1, -1, -1, -1]

    Times_RGV_Temp = 0
    Times_CNC_Temp = [0, 0, 0, 0, 0, 0, 0, 0]
    Times_RGV_Move = [0, 0, 0, 0, 0, 0, 0, 0]
    Times_CNC_Up = [0, 0, 0, 0, 0, 0, 0, 0]
    Times_CNC_Down = [0, 0, 0, 0, 0, 0, 0, 0]

    PrintLoop(NowTime, CNC_Min_Time, CNC_Carry_State, RGV_Locat, RGV_Min_Time, RGV_Carry_State)

    FileSave.write("当前工作时间节点：" + str(NowTime) + '\n')
    '''选择局部最优加工方案'''
    MinIndex = LocalOptimalScheme(True)

    # 运行
    if RGV_Min_Time == 0:
        # print("Move:", RGV_Locat, "->", MinIndex, "UpDown:", CNC_Carry_State[RGV_Locat])
        FileSave.write(r"Move: % 2d -> % 2d UpDown: %2d %c" % (RGV_Locat, MinIndex, CNC_Carry_State[RGV_Locat], '\n'))

        if CNC_Carry_State[MinIndex] == 0:
            print("从CNC", RGV_Locat, "移动到CNC", MinIndex, "进行上料操作")
            CNC_Carry_State[MinIndex] = 1
            if CNC_Min_Time[MinIndex] == 0:
                CNC_Min_Time[MinIndex] = CNC_WORK_TIME + Time_All_Temp[MinIndex]
            else:
                print("ERROR!")
            RGV_Min_Time = Time_All_Temp[MinIndex]
        else:
            print("从CNC", RGV_Locat, "移动到CNC", MinIndex, "进行下料清洗操作")
            if CNC_Min_Time[MinIndex] == 0:
                CNC_Carry_State[MinIndex] = 0
                RGV_Min_Time = Time_All_Temp[MinIndex]
                ProductAdd()
        RGV_Locat = MinIndex

    TimeUnit = OptimizingTimeParameters(True)
    if RGV_Min_Time != 0:
        print("对RGV进行等待", TimeUnit, "s 操作")
        FileSave.write(r"DelayS: %2d  On: %2d %c" % (TimeUnit, RGV_Locat, '\n'))

    # 时间前进
    for i in range(len(CNC_Min_Time)):
        CNC_Min_Time[i] = VoidTimeCome_CNC(CNC_Min_Time[i], TimeUnit)
    RGV_Min_Time = VoidTimeCome_RGV(RGV_Min_Time, TimeUnit)
    TimeCome(TimeUnit, True)

    if NowTime >= EndTime:
        break
print("\033[1;31;42mAllProduct", AllProduct)
FileSave.close()
